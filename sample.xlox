print "Testing sample.xlox";

// Expression Statement Evaluation

true or false;
true and (true or false);
-4 + 5 > -10;
4 * 7.5 >= 28;
"5" != 5;
true == true;
(5 < 5);
5 <= 23 == true;
!false;
!!true == true;
2 * (3 + 4) == 20 / 2;
"Hello World!";
true;
false;
true != nil;
nil;
(1 + 2.9) != 4;
(((1) + 2) + 3.14);

// Variable Declaration

var a; var b; var e = nil;
var c = 3;
var d = true;
var f = e = "Hello World!";

// Variable Assignment

a = b = 1;
d = !d;

// If Statements

var p = true;

if (a = true) {
	if (p) print "a is true";
} else {
	if (p) print "a is false";
}

c = 2;
if (c == 1) {
	if (p) print "c is 1";
	else c = -1;
} else if (c == 2) {
	if (p) print "c is 2";
	else c = -1;
} else {
	if (p) print "c is neither 1 nor 2";
	else c = -1;
}

if (d)
	if (!p) print "d is true";
	else print "!p";
else
	if (!p) print "d is false";
	else print "!p";

if (nil) print "nil is truthy";
else print "nil is falsey";

if (3) print "3 is truthy";
else print "3 is falsey";

if (0) print "0 is truthy";
else print "0 is falsey";

if ("POP") print "'POP' is truthy";
else print "'POP' is falsey";

if ("") print "'' is truthy";
else print "'' is falsey";

// While Loops

a = 0;
while (a < 10) {
	a = a + 1;
}

while (a > 0)
	a = a - 1;

if (a == 0)
	print "a is 0!";

a = 0;
while (a < 10) {
	a = a + 1;
	if (a == 5)
		print "a is 5!";
}

// For Loops

var k;
for (var i = 0; i < 10; i = i + 1) k=i;
if (k != 9)
	print "k is not 9";

var i = 0;
for (;i<0;){
	i = i + 1;
}

// Variable Scopes

var g = 0;
{
	var g = 1;
	print g == 1;
}
print g == 0;

// Functions

fun sayHi(first, last) {
		print "Hi, " + first + " " + last + "!";
}
sayHi("John", "Smith");

fun printTwice() {
	fun printOnce(){
		print "Inner";
	}

	print "Outer";
	printOnce();
}

printTwice();

fun fib(n){
	if (n<=1) return 1;
	return fib(n-1) + fib(n-2);
}

for (var i = 0; i < 10; i = i + 1) {
	print fib(i);
}

// Resolver allows for consistent semantics

var a = "outer";
{
	fun showA(){
		print a;
	}

	showA(); // "outer"
	var a = "inner";
	showA(); // "outer"
}

var a = "outer";
{
	fun showA(){
		print a;
	}

	showA(); // "outer"
	a = "inner"; // not declaring a new var, so this is a reassignment of global 'a'
	showA(); // "inner"
}

// Classes

class Animal {
	fun speak() {
		print "I'm an animal!";
	}
}

var animal = Animal();
animal.speak();
var dog = animal;
dog.speak();

class Counter{
	fun init(){
		this.count = 0;
		return;
	}

	fun inc(){
		this.count = this.count + 1;
		return this.count;
	}

	fun inc2(){
		this.inc(); this.inc();
		return this.count;
	}
}

var counter = Counter();
print "2x inc():";
print counter.inc();
print counter.inc();
print "inc2() Now:";
print counter.inc2();

fun dec(c){
	c.count = c.count - 1;
	return c.count;
}

print "External count call with fun dec():";
print dec(counter);

print "Add 'slip' = false property";
counter.slip = false;
print counter.slip;

class Cake{
	fun taste(){
		var adjective = "delicious";
		print "This " + this.flavour + " cake is " + adjective + "!";
	}
}

var cake = Cake();
cake.flavour = "German Chocolate";
cake.taste();

class Node{
	fun init(data){
		this._data = data;
		this._next = nil;
	}

	fun next(){
		return this._next;
	}

	fun data(){
		return this._data;
	}

	fun setNext(data){
		this._next = Node(data);
	}

	fun delNext(){
		this._next = nil;
	}

}

class Vector{
	fun init(){
		this.size = 0;
		this.head = nil;
	}

	fun append(data){
		if (this.size == 0){
			this.head = Node(data);
			this.size = this.size + 1;
			return this;
		}

		var node = this.head;
		while (node.next() != nil){
			node = node.next();
		}
		
		node.setNext(data);
		this.size = this.size + 1;
		return this;
	}

	fun shrink(){
		if (this.size <= 1){
			this.head = nil;
			this.size = 0;
			return this;
		}

		var node = this.head;
		while (node.next().next() != nil){
			node = node.next();
		}
		
		node.delNext();
		this.size = this.size - 1;
		return this;
	}

	fun search(key){

		for (var node = this.head; node != nil; node = node.next()){
			if (node.data() == key){
				return true;
			}
		}

		return false;
	}

	fun str(){
		var string = "[";

		if (this.size == 0)
			return string + "]";
		
		string = string + this.head.data();

		for (var node = this.head.next(); node != nil; node = node.next()){
			string = string + ", " + node.data();
		}

		return string + "]";
	}
}

var vector = Vector();
vector.append(1).append(2).append(3).append(4).append(5);
print "Size: " + vector.size;
print vector.str();

vector.shrink();
print "New Size: " + vector.size;
print vector.str();

print "Has 2: " + vector.search(2);
print "Has 5: " + vector.search(5);

vector.shrink().shrink();
print "New Size: " + vector.size;
print vector.str();

var newVec = Vector();
newVec.append(true).append(true).append(false);
print "New Vector Size: " + newVec.size;
print newVec.str();
print "Original Vector Size: " + vector.size;
print vector.str();

// Inheritance

class Doughnut{
	fun cook(){
		print "Fry until golden brown";
	}
}

class BostonCream < Doughnut {
	fun cook(){
		super.cook();
		print "Pipe full of custard and coat with chocolate.";
	}
}

Doughnut().cook();
BostonCream().cook();

class A{
	fun method(){
		print "Method A";
	}
}

class B < A{
	fun method(){
		print "Method B";
	}
	fun test(){
		super.method();
	}
}

class C < B {}
C().test(); // "Method A"
A().method(); // "Method A"
B().method(); // "Method B"
C().method(); // "Method B"


// xLox Features
/* Block Comments! */
/*
 * This is a multi-line comment.
 * It can be used to comment out a block of code.
 */
/*They*/ var /*can*/ l /*be*/ = /*placed*/ 0 /*anywhere*/ ; /*!*/
print l == 0;

// Multiple Variable Declarations **BROKEN**
// 
// var xa, xb = 3, xc = "hi", xd = false, xe = nil;
// print "" + xa;
// print "" + xb;
// print "" + xc;
// print "" + xd;
// print "" + xe;

// Comma Expressions
// Incompatible with inline declarations, like 'for', and function call expressions without parentheses.

a = 1, b = a, c = b;
print "Should be true:";
print a == b and b == c and a == c;

var j; var h;
for (var i = 0, j = -2; i < 10; i = i + 1, j = j + 1) 
	h = i;
print h == j + 2;
print "" + h + (" " + j);

// Not working??
var j = -1; var h; var r;
for (var i = 0; i < 3; i = i + 1, j = j + 1) {
	print i + " " + j;
	h = i;
	r = j;
}
print h + " . " + j + " -> " + r;
print h + " =h j= " + j;
print h == r + 1;

// Ternary Operator

a = 2; b = 3;
var max;
max = a > b ? a : b;

c = 3;
print c<1 ? "<1" : c==1 ? 1 : c==2 ? 2 : c==3 ? 3 : ">4";


// Auto String Concatenation
print "Number is " + 4;
print 4 + " is a number";
print "Hello " + "World!";
print "Just " + false + " need " + 4 + " a " + 3.14 + " first!";
print 4 + 6 + " = 4 + 6";
print "4 + 6 = " + (4 + 6); //< Need to use parentheses to force math evaluation first

// Break

a = 0;
while (a < 10) {
	a = a + 1;
	if (a == 5)
		break;
}
print "a = 5 (t): " + (a == 5);

var x = nil;
for (var i = 0; i < 10; i = i + 1) {
	x = i;
	if (i == 5)
		break;
}
print "i = 5 (t): " + (x == 5);

var x = nil;
for (var i = 0; i < 10; i = i + 1) {
	x = i;
	if (i == 5) do {
		break;
	}
}
print "i = 5 (f): " + (x == 5);

for (var i = 0; i < 10; i = i + 1) {
	if (i == 5)
		if (true)
			if (true)
				if (false)
					print i*i;
				else
					break;
			else
				print i*i;
		else
			print i*i;
}

// Do Statements

f = false;
do {
	print "Doing stuff";
	print "Doing more stuff";
	break;
	print "Relax time";
	f = true;
}
print "Did relax: " + f;

if (true) do {
	print "Works with ifs";
	break;
	print "Or not...";
}

// Do-While Loops

i = 10;
do 
	i = i-1;
while (i > 0);

i = 10;
do {
	i = i-1;
} while (i > 0);
print "i = " + i;

// Anonymous Functions

var max = fun (a, b) {
	if (a > b) return a;
	return b;
}; 
print "max(3,8) = " + max(3,8);

fun max (a, b) {
	if (a > b) return a;
	return b;
}
print "max(8,3) = " + max(8,3);

fun thrice(ft){
	for (var i = 0; i < 3; i = i + 1) 
		ft(i);
}

thrice(fun (a) { print a; });

fun () {}; // anonymous function which looks like a function declaration

var xx; var xy; var xz;
xx = fun () {print "xx";}, xy = fun () {print "xy";};
xz = fun () {print "xz";};

xx(); xy(); xz();

fun nestedPrint() {
	return fun (a,b) {
		print "n" + a;
		print "n" + b;
	};
}

nestedPrint()(1,2);

// Constants

let CC = 1;
print "Constant CC = " + CC;
// CC = 2; //< Error!
// var CC = 3; // <Error!

var va = CC + CC; // const is not carried
va = va + 2;

let max = fun (a, b) {
	if (a > b) return a;
	return b;
};

print max(66,33);

// max = 66; //< Error!

var a = "global";
{
	fun showA() {
		print a;
	}

	showA();
	a = "local";
	showA();
}

class Extensible{

}

var thing = Extensible();
thing.func = fun(){
	print "I was added after!!";
};

thing.func();

thing.func2 = fun(a){print a;};
thing.func2("im a arg");


// Static Methods

Vector.whoami = fun () {return "Vector";};
print "Vector.whoami(): " + Vector.whoami();
// print "vector.whoami(): " + vector.whoami(); //< Error! function was added to Vector class

class MathConst{
	fun whoami(){return "MathConst";}
	static pi(){return 3.14;}
	static e(){return 2.718;}
	static g(){return 9.8;}
	static goldenRatio(){return 1.618;}
	static sqrt2(){return 1.414;}
	static sqrt3(){return 1.732;}
}

print "pi = " + MathConst.pi();
print "e = " + MathConst.e();

var mc = MathConst();
print "I am a " + mc.whoami();
// print "pi = " + mc.pi(); // < Error! instances cannot call static methods

// Getters

class A{
	fun say {
		print "aaa";
	}
}

var a = A();
a.say;

// a.shout = fun { print "AAA!"; }; // not permitted anymore...
// a.shout;

// Constant Folding

print 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;

print 1 + 1 - 1 / (1 * 1) + (1 + 1 * 1 + 1 - 1 + (1 + 1));

print 1 + 1 + 1 < 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;

print false and true and true or false and true;

// Nested Block Comments

/* Here /* I /* Am! */*/*/

/*Here/*I/* Am! */ */ */

/*/*/* Here I Am! */*/*/

/* Here /* I /* Am! */ */ */

/*/*/* Here */ It */ Is */

// Arrays!

var jeb = [[1,2,3],2,3];
print jeb[2];

var a = jeb[0];
print a;

jeb[0][0] = 5;

print a;
print jeb;

jeb = [1, 1.2, "true", false, fun (){print "YAY";}, [1,2,3]];
print jeb;

var a = [2,3,4][0];
print a;

var jab = jeb[5];
print jab[2];

jeb[4]();

// Appending and Prepending

print [1,2,3,4] ++ 5;
print [] ++ 5;
print 5 ++ [1,2,3,4];
print 5 ++ [];

print 1 ++ [] ++ 2;

/* Prefix Operations (Deactivated by default)
 * 
 * var a = 5;
 * ++a;
 * print "6 = " + a;
 * --a;
 * print "5 = " + a;
 * 
 * a = 0;
 * print "1 = " + ++a;
 * print "2 = " + ++a;
 * 
 * a = 2;
 * a = ++a;
 * print "3 = " + a;
 * 
 * a = 0;
 * print "5 = " + (++a + 4);
 * print "1 = " + a;
 * 
 * a = 2.5;
 * print "3.5 = " + ++a;
 * print "2.5 = " + --a;
 */

// Shorthand Assignment

a = 0;
a += 1;
print "1 : " + a;
a += 3;
print "4 : " + a;
a -= 1;
print "3 : " + a;
a *= 2;
print "6 : " + a;
a /= 3;
print "2 : " + a;

class F{
	fun init(){
		this.a = 0;
	}
}

a = F();
a.a = 1;
print "c1 : " + a.a;
a.a += 3;
print "c4 : " + a.a;
a.a -= 1;
print "c3 : " + a.a;
a.a *= 2;
print "c6 : " + a.a;
a.a /= 3;
print "c2 : " + a.a;

a = [0,2,3];
a[0] = 1;
print "a1 : " + a[0];
a[0] += 3;
print "a4 : " + a[0];
a[0] -= 1;
print "a3 : " + a[0];
a[0] *= 2;
print "a6 : " + a[0];
a[0] /= 3;
print "a2 : " + a[0];

// Constant Function and Class name binding

let class Math{
	static pi { return 3.1415; }
	static e  { return 2.7182; }
}

print Math.e + Math.pi;
// Math = 45; //< Error!
// var Math = 23; //< Error!
// let Math = 23; //< Error!

Math.goldenRatio = 1.618; // Math variable is constant, not the class
print Math.goldenRatio;

let fun min(a,b){
	return b;
}

fun min ( a , b) {
	if (a < b) return a;
	return b;
}

// min = 45; //< Error!
// let min = 23; //< Error!


let fun AAAA(AA, BB, CC){
	return "AAA";
}
fun AAAA(AA, BB, CC){
	return "AAA";
}

class AAAA <- A {
	fun init(a, b) {}
	fun AAA {}
	fun AAA(a, b) {}
	static AAA {}
	static AAA() {}
}
let class AAAA <- A {
	fun init(a, b) {}
	fun AAA {}
	fun AAA(a, b) {}
	static AAA {}
	static AAA() {}
}


// List removal

var f = [] ++ 1 ++ 2 ++ 3 ++ 4 ++ 5;

print f;

var r = --f; // catch removed

print f;
print r;

r = f--; // catch removed

print f;
print r;

// Panics

try {
	panic 1;
} catch 1 {
	print "caught 1";
}

try {
	panic 2;
} catch 1 {
	print "caught 1";
} catch 2 {
	print "caught 2";
}

try {
	panic;
} catch {
	print "catch all";
} 

try {
	panic;
} catch 1 {
	print "caught 1";
} catch {
	print "catch all";
} 

try {
	panic 1;
} catch 1 {
	print "caught 1";
} catch {
	print "catch all";
} 

try {
	panic 2;
} catch 1 {
	print "caught 1";
} catch {
	print "catch all";
} 


print "Completed sample.xlox!";
