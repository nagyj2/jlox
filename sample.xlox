print "Testing sample.xlox";

// Expression Statement Evaluation

true or false;
true and (true or false);
-4 + 5 > -10;
4 * 7.5 >= 28;
"5" != 5;
true == true;
(5 < 5);
5 <= 23 == true;
!false;
!!true == true;
2 * (3 + 4) == 20 / 2;
"Hello World!";
true;
false;
true != nil;
nil;
(1 + 2.9) != 4;
(((1) + 2) + 3.14);

// Variable Declaration

var a; var b; var e = nil;
var c = 3;
var d = true;
var f = e = "Hello World!";

// Variable Assignment

a = b = 1;
d = !d;

// If Statements

var p = true;

if (a = true) {
	if (p) print "a is true";
} else {
	if (p) print "a is false";
}

c = 2;
if (c == 1) {
	if (p) print "c is 1";
	else c = -1;
} else if (c == 2) {
	if (p) print "c is 2";
	else c = -1;
} else {
	if (p) print "c is neither 1 nor 2";
	else c = -1;
}

if (d)
	if (!p) print "d is true";
	else print "!p";
else
	if (!p) print "d is false";
	else print "!p";

if (nil) print "nil is truthy";
else print "nil is falsey";

if (3) print "3 is truthy";
else print "3 is falsey";

if (0) print "0 is truthy";
else print "0 is falsey";

if ("POP") print "'POP' is truthy";
else print "'POP' is falsey";

if ("") print "'' is truthy";
else print "'' is falsey";

// While Loops

a = 0;
while (a < 10) {
	a = a + 1;
}

while (a > 0)
	a = a - 1;

if (a == 0)
	print "a is 0!";

a = 0;
while (a < 10) {
	a = a + 1;
	if (a == 5)
		print "a is 5!";
}

// For Loops

var k;
for (var i = 0; i < 10; i = i + 1) k=i;
if (k != 9)
	print "k is not 9";

var i = 0;
for (;i<0;){
	i = i + 1;
}

// Variable Scopes

var g = 0;
{
	var g = 1;
	print g == 1;
}
print g == 0;

// Functions

fun sayHi(first, last) {
		print "Hi, " + first + " " + last + "!";
}
sayHi("John", "Smith");

fun printTwice() {
	fun printOnce(){
		print "Inner";
	}

	print "Outer";
	printOnce();
}

printTwice();

fun fib(n){
	if (n<=1) return 1;
	return fib(n-1) + fib(n-2);
}

for (var i = 0; i < 10; i = i + 1) {
	print fib(i);
}

// xLox Features
/* Block Comments! */
/*
 * This is a multi-line comment.
 * It can be used to comment out a block of code.
 */
/*They*/ var /*can*/ l /*be*/ = /*placed*/ 0 /*anywhere*/ ; /*!*/
print l == 0;

// Multiple Variable Declarations

var xa, xb = 3, xc = "hi", xd = false, xe = nil;
print "" + xa;
print "" + xb;
print "" + xc;
print "" + xd;
print "" + xe;

// Comma Expressions
// Incompatible with inline declarations, like 'for', and function call expressions without parentheses.

a = 1, b = a, c = b;
print "Should be true:";
print a == b and b == c and a == c;

var hh; var h;
for (var i = 0, j = -2; i < 10; i = i + 1, j = j + 1) 
	h = i, hh = j;
print h == hh + 2;
print "" + h + (" " + hh);

// Not working??
var j = -1; var h; var r;
for (var i = 0; i < 3; i = i + 1, j = j + 1) {
	print i + " " + j;
	h = i;
	r = j;
}
print h + " . " + j + " -> " + r;
print h + " =h j= " + j;
print h == r + 1;

// Ternary Operator

a = 2; b = 3;
var max;
max = a > b ? a : b;

c = 3;
print c<1 ? "<1" : c==1 ? 1 : c==2 ? 2 : c==3 ? 3 : ">4";


// Auto String Concatenation
print "Number is " + 4;
print 4 + " is a number";
print "Hello " + "World!";
print "Just " + false + " need " + 4 + " a " + 3.14 + " first!";
print 4 + 6 + " = 4 + 6";
print "4 + 6 = " + (4 + 6); //< Need to use parentheses to force math evaluation first

// Break

a = 0;
while (a < 10) {
	a = a + 1;
	if (a == 5)
		break;
}
print "a = 5 (t): " + (a == 5);

var x = nil;
for (var i = 0; i < 10; i = i + 1) {
	x = i;
	if (i == 5)
		break;
}
print "i = 5 (t): " + (x == 5);

var x = nil;
for (var i = 0; i < 10; i = i + 1) {
	x = i;
	if (i == 5) do {
		break;
	}
}
print "i = 5 (f): " + (x == 5);

for (var i = 0; i < 10; i = i + 1) {
	if (i == 5)
		if (true)
			if (true)
				if (false)
					print i*i;
				else
					break;
			else
				print i*i;
		else
			print i*i;
}

// Do Statements

f = false;
do {
	print "Doing stuff";
	print "Doing more stuff";
	break;
	print "Relax time";
	f = true;
}
print "Did relax: " + f;

if (true) do {
	print "Works with ifs";
	break;
	print "Or not...";
}

// Do-While Loops

i = 10;
do 
	i = i-1;
while (i > 0);

i = 10;
do {
	i = i-1;
} while (i > 0);
print "i = " + i;

// Anonymous Functions

var max = fun (a, b) {
	if (a > b) return a;
	return b;
}; 
print "max(3,8) = " + max(3,8);

fun max (a, b) {
	if (a > b) return a;
	return b;
}
print "max(8,3) = " + max(8,3);

fun thrice(ft){
	for (var i = 0; i < 3; i = i + 1) 
		ft(i);
}

thrice(fun (a) { print a; });

fun () {}; // anonymous function which looks like a function declaration

var xx; var xy; var xz;
xx = fun () {print "xx";}, xy = fun () {print "xy";};
xz = fun () {print "xz";};

xx(); xy(); xz();

fun nestedPrint() {
	return fun (a,b) {
		print "n" + a;
		print "n" + b;
	};
}

nestedPrint()(1,2);

// Constants

let CC = 1;
print "Constant CC = " + CC;
// a = 2; //< Error!
// var a = 3; // <Error!

var va = CC + CC; // const is not carried
va = va + 2;

let max = fun (a, b) {
	if (a > b) return a;
	return b;
};

print max(66,33);

var a = "global";
{
	fun showA() {
		print a;
	}

	showA();
	a = "local";
	showA();
}

print "Completed sample.xlox!";
